<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--    namespace表示映射的接口-->
<mapper namespace="com.cy.store.mapper.UserMapper">
<!--    自定义映射规则：resultmap标签来完成映射规则的定义-->

    <!--
    id属性:映射唯一的id值,
    type属性:表示数据库查询的数据和java中具体哪个类对应

    -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
<!--        column属性表示表中字段的名称,property表示映射的属性名称-->

<!--        定义映射规则时主键是不可省略的 无论名称是否一致-->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

<!--    Integer insert(User user);-->
<!--    id属性表示映射的接口中方法的名称，直接在标签内容部分写sql语句，
        达到sql语句和java代码分离解耦的目的-->
<!--
    mybatis不会给自增主键自动赋值，
    要使用useGeneratedKeys标签开启某个字段的值递增(一般是主键递增)
    keyProperty指定具体是哪个字段递增
-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user(
        username, password, salt, phone, email, gender, avatar, is_delete, created_user, created_time, modified_user, modified_time
        )VALUES(
            #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime}
            )
    </insert>

<!--    User findByUsername(String username);-->
<!--    在select语句执行时，结果为一条记录或者多条记录-->
<!--
    resultType：表示查到的结果集类型，需指定映射的完整包接口com.store.entitiy.User
    resultMap:表示当前表的字段名和类的属性名不一致时的自定义映射规则

-->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>

    <!-- Integer updatePasswordByUid(
            Integer uid,
            String password,
            String modifiedUser,
            Date modifiedTime);-->
    <update id="updatePasswordByUid">
        UPDATE
            t_user
        SET
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>

    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <select id="findByUid" resultMap="UserEntityMap">
        SELECT
            *
        FROM
            t_user
        WHERE
            uid = #{uid}
    </select>

<!--    Integer updateInfoByUid(User user);-->
    <update id="updateInfoByUid">
        UPDATE
            t_user
        SET
        <!--if表示条件判断语句，test标签里为true才执行标签里的语句 -->
            <if test="phone != null">phone = #{phone},</if>
            <if test="email != null">email = #{email},</if>
            <if test="gender != null">gender = #{gender},</if>
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>

    <!-- 根据uid更新用户的头像
	     Integer updateAvatarByUid(
		    @Param("uid") Integer uid,
		    @Param("avatar") String avatar,
		    @Param("modifiedUser") String modifiedUser,
		    @Param("modifiedTime") Date modifiedTime) -->
    <update id="updateAvatarByUid">
        UPDATE
            t_user
        SET
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>

</mapper>